import fs from "fs";
import path from "path";
import { InterfaceDeclaration, Project } from "ts-morph";

const project = new Project();
const sourceFile = project.addSourceFileAtPath(
  path.resolve(__dirname, "./interfaces.ts")
); // Update the path

const interfaces = sourceFile.getInterfaces();

let imports = new Set<string>();

let generatedCode = `// This is an autogenerated file, DO NOT EDIT.
// This file was generated from \`interfaces.ts\` by running \`npm run gen:components\`.


const Cast = {`;


const processInterface = (interfaceDeclaration: InterfaceDeclaration, propertiesCheckCode:string[] = []) => {
  const interfaceName = interfaceDeclaration.getName();
  imports.add(interfaceName);

  // For interfaces with extensions, we will simply confirm that we can cast to the ancestors
  interfaceDeclaration.getBaseDeclarations().forEach((i)=>{
    propertiesCheckCode.push(`Cast.to${i.getName()!.slice(1)}(obj)`);
  });

  interfaceDeclaration.getMethods().forEach((meth) => {
    const propName = meth.getName();
    const type = meth.getType(); // you can get more details from type if needed
    propertiesCheckCode.push(`obj.${propName} !== undefined`);
  });

  interfaceDeclaration.getProperties().forEach((prop) => {
    const propName = prop.getName();
    const type = prop.getType(); // you can get more details from type if needed
    propertiesCheckCode.push(`obj.${propName} !== undefined`);
  });

  console.log (`Generated ${interfaceName} methods...`);

  return propertiesCheckCode;
};

interfaces.forEach(int => {
  const interfaceName = int.getName();
  var compiledPropChecks = processInterface(int);

  generatedCode += `
  to${interfaceName.slice(1)}: function (obj: any): ${interfaceName} | null {
    return (${compiledPropChecks.join(" && ")}) ? obj : null;
  },`;

});

generatedCode += `\n};\n`;
generatedCode = `import type { ${Array.from(imports.values()).sort().join(", ")} } from './interfaces';\n\n${generatedCode}\n\nexport default Cast;`;

fs.writeFileSync(path.resolve(__dirname, "./cast.gen.ts"), generatedCode);
